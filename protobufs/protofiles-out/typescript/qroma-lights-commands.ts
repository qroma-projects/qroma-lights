// @generated by protobuf-ts 2.9.3 with parameter use_proto_field_name,generate_dependencies
// @generated from protobuf file "qroma-lights-commands.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { QromaLightsConfig } from "./qroma-lights-types";
import { QromaStrip_WS2812FX_IoSettings } from "./qroma-lights-types";
import { QromaStrip_WS2812FX_Animation } from "./qroma-lights-types";
import { QromaStrip_WS2812FX_Segment } from "./qroma-lights-types";
import { QromaStrip_WS2812FX_StripIndex } from "./qroma-lights-types";
/**
 * @generated from protobuf message SetQromaStrip_WS2812FX_Segments
 */
export interface SetQromaStrip_WS2812FX_Segments {
    /**
     * @generated from protobuf field: QromaStrip_WS2812FX_StripIndex stripIndex = 1;
     */
    stripIndex: QromaStrip_WS2812FX_StripIndex;
    /**
     * @generated from protobuf field: uint32 numSegments = 2;
     */
    numSegments: number;
    /**
     * @generated from protobuf field: repeated QromaStrip_WS2812FX_Segment segments = 3;
     */
    segments: QromaStrip_WS2812FX_Segment[];
}
/**
 * @generated from protobuf message SetQromaStrip_WS2812FX_SegmentAnimation
 */
export interface SetQromaStrip_WS2812FX_SegmentAnimation {
    /**
     * @generated from protobuf field: QromaStrip_WS2812FX_Animation animation = 1;
     */
    animation?: QromaStrip_WS2812FX_Animation;
    /**
     * @generated from protobuf field: QromaStrip_WS2812FX_StripIndex stripIndex = 2;
     */
    stripIndex: QromaStrip_WS2812FX_StripIndex;
    /**
     * @generated from protobuf field: uint32 segmentIndex = 3;
     */
    segmentIndex: number;
}
/**
 * @generated from protobuf message SetQromaStrip_WS2812FX_Brightness
 */
export interface SetQromaStrip_WS2812FX_Brightness {
    /**
     * @generated from protobuf field: QromaStrip_WS2812FX_StripIndex stripIndex = 1;
     */
    stripIndex: QromaStrip_WS2812FX_StripIndex;
    /**
     * @generated from protobuf field: uint32 brightness = 2;
     */
    brightness: number; // 0-255
}
/**
 * @generated from protobuf message SetQromaStrip_WS2812FX_IoSettings
 */
export interface SetQromaStrip_WS2812FX_IoSettings {
    /**
     * @generated from protobuf field: QromaStrip_WS2812FX_StripIndex stripIndex = 1;
     */
    stripIndex: QromaStrip_WS2812FX_StripIndex;
    /**
     * @generated from protobuf field: QromaStrip_WS2812FX_IoSettings settings = 2;
     */
    settings?: QromaStrip_WS2812FX_IoSettings;
}
/**
 * @generated from protobuf message SaveQromaStrip_CurrentState
 */
export interface SaveQromaStrip_CurrentState {
    /**
     * @generated from protobuf field: QromaStrip_WS2812FX_StripIndex stripIndex = 1;
     */
    stripIndex: QromaStrip_WS2812FX_StripIndex;
}
/**
 * @generated from protobuf message QromaStripCommand
 */
export interface QromaStripCommand {
    /**
     * @generated from protobuf oneof: command
     */
    command: {
        oneofKind: "setQromaStripBrightness";
        /**
         * @generated from protobuf field: SetQromaStrip_WS2812FX_Brightness setQromaStripBrightness = 1;
         */
        setQromaStripBrightness: SetQromaStrip_WS2812FX_Brightness;
    } | {
        oneofKind: "setQromaStripSegmentAnimation";
        /**
         * @generated from protobuf field: SetQromaStrip_WS2812FX_SegmentAnimation setQromaStripSegmentAnimation = 2;
         */
        setQromaStripSegmentAnimation: SetQromaStrip_WS2812FX_SegmentAnimation;
    } | {
        oneofKind: "setQromaStripSegments";
        /**
         * @generated from protobuf field: SetQromaStrip_WS2812FX_Segments setQromaStripSegments = 3;
         */
        setQromaStripSegments: SetQromaStrip_WS2812FX_Segments;
    } | {
        oneofKind: "setQromaStripIoSettings";
        /**
         * @generated from protobuf field: SetQromaStrip_WS2812FX_IoSettings setQromaStripIoSettings = 4;
         */
        setQromaStripIoSettings: SetQromaStrip_WS2812FX_IoSettings;
    } | {
        oneofKind: "saveQromaStripCurrentState";
        /**
         * @generated from protobuf field: SaveQromaStrip_CurrentState saveQromaStripCurrentState = 5;
         */
        saveQromaStripCurrentState: SaveQromaStrip_CurrentState;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message QromaStripResponse
 */
export interface QromaStripResponse {
}
/**
 * @generated from protobuf message QromaStrip_Status
 */
export interface QromaStrip_Status {
    /**
     * @generated from protobuf field: uint32 lastConfigChangeTimeInMs = 1;
     */
    lastConfigChangeTimeInMs: number;
}
/**
 * @generated from protobuf message QpmCommand_SetQromaStripName
 */
export interface QpmCommand_SetQromaStripName {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message SetQromaDeviceName
 */
export interface SetQromaDeviceName {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message UseCurrentSetupOnStartup
 */
export interface UseCurrentSetupOnStartup {
    /**
     * @generated from protobuf field: uint32 delayInMs = 1;
     */
    delayInMs: number;
}
// // not sure how I feel about this, but let's try it out, at least
// enum NoArgCommands_QromaLightsCommand {
//   NacQlc_NotSet = 0;
//   NacQlc_UseCurrentSetupOnStartup = 1;
//   NacQlc_RestartQromaDevice = 2;
//   NacQlc_FactoryResetQromaDevice = 3;
//   NacQlc_RequestQromaLightsConfig = 4;
// }

/**
 * @generated from protobuf message QromaLightsCommand
 */
export interface QromaLightsCommand {
    /**
     * @generated from protobuf oneof: command
     */
    command: {
        oneofKind: "setQromaDeviceName";
        /**
         * NoArgCommands_QromaLightsCommand noArgCommand = 1;
         *
         * @generated from protobuf field: SetQromaDeviceName setQromaDeviceName = 1;
         */
        setQromaDeviceName: SetQromaDeviceName;
    } | {
        oneofKind: "qromaStripCommand";
        /**
         * @generated from protobuf field: QromaStripCommand qromaStripCommand = 2;
         */
        qromaStripCommand: QromaStripCommand;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message QromaLightsResponse
 */
export interface QromaLightsResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "qromaLightsConfigResponse";
        /**
         * @generated from protobuf field: QromaLightsConfig qromaLightsConfigResponse = 1;
         */
        qromaLightsConfigResponse: QromaLightsConfig;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class SetQromaStrip_WS2812FX_Segments$Type extends MessageType<SetQromaStrip_WS2812FX_Segments> {
    constructor() {
        super("SetQromaStrip_WS2812FX_Segments", [
            { no: 1, name: "stripIndex", kind: "enum", T: () => ["QromaStrip_WS2812FX_StripIndex", QromaStrip_WS2812FX_StripIndex] },
            { no: 2, name: "numSegments", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "segments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QromaStrip_WS2812FX_Segment }
        ]);
    }
    create(value?: PartialMessage<SetQromaStrip_WS2812FX_Segments>): SetQromaStrip_WS2812FX_Segments {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stripIndex = 0;
        message.numSegments = 0;
        message.segments = [];
        if (value !== undefined)
            reflectionMergePartial<SetQromaStrip_WS2812FX_Segments>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetQromaStrip_WS2812FX_Segments): SetQromaStrip_WS2812FX_Segments {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QromaStrip_WS2812FX_StripIndex stripIndex */ 1:
                    message.stripIndex = reader.int32();
                    break;
                case /* uint32 numSegments */ 2:
                    message.numSegments = reader.uint32();
                    break;
                case /* repeated QromaStrip_WS2812FX_Segment segments */ 3:
                    message.segments.push(QromaStrip_WS2812FX_Segment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetQromaStrip_WS2812FX_Segments, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QromaStrip_WS2812FX_StripIndex stripIndex = 1; */
        if (message.stripIndex !== 0)
            writer.tag(1, WireType.Varint).int32(message.stripIndex);
        /* uint32 numSegments = 2; */
        if (message.numSegments !== 0)
            writer.tag(2, WireType.Varint).uint32(message.numSegments);
        /* repeated QromaStrip_WS2812FX_Segment segments = 3; */
        for (let i = 0; i < message.segments.length; i++)
            QromaStrip_WS2812FX_Segment.internalBinaryWrite(message.segments[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetQromaStrip_WS2812FX_Segments
 */
export const SetQromaStrip_WS2812FX_Segments = new SetQromaStrip_WS2812FX_Segments$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetQromaStrip_WS2812FX_SegmentAnimation$Type extends MessageType<SetQromaStrip_WS2812FX_SegmentAnimation> {
    constructor() {
        super("SetQromaStrip_WS2812FX_SegmentAnimation", [
            { no: 1, name: "animation", kind: "message", T: () => QromaStrip_WS2812FX_Animation },
            { no: 2, name: "stripIndex", kind: "enum", T: () => ["QromaStrip_WS2812FX_StripIndex", QromaStrip_WS2812FX_StripIndex] },
            { no: 3, name: "segmentIndex", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetQromaStrip_WS2812FX_SegmentAnimation>): SetQromaStrip_WS2812FX_SegmentAnimation {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stripIndex = 0;
        message.segmentIndex = 0;
        if (value !== undefined)
            reflectionMergePartial<SetQromaStrip_WS2812FX_SegmentAnimation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetQromaStrip_WS2812FX_SegmentAnimation): SetQromaStrip_WS2812FX_SegmentAnimation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QromaStrip_WS2812FX_Animation animation */ 1:
                    message.animation = QromaStrip_WS2812FX_Animation.internalBinaryRead(reader, reader.uint32(), options, message.animation);
                    break;
                case /* QromaStrip_WS2812FX_StripIndex stripIndex */ 2:
                    message.stripIndex = reader.int32();
                    break;
                case /* uint32 segmentIndex */ 3:
                    message.segmentIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetQromaStrip_WS2812FX_SegmentAnimation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QromaStrip_WS2812FX_Animation animation = 1; */
        if (message.animation)
            QromaStrip_WS2812FX_Animation.internalBinaryWrite(message.animation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* QromaStrip_WS2812FX_StripIndex stripIndex = 2; */
        if (message.stripIndex !== 0)
            writer.tag(2, WireType.Varint).int32(message.stripIndex);
        /* uint32 segmentIndex = 3; */
        if (message.segmentIndex !== 0)
            writer.tag(3, WireType.Varint).uint32(message.segmentIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetQromaStrip_WS2812FX_SegmentAnimation
 */
export const SetQromaStrip_WS2812FX_SegmentAnimation = new SetQromaStrip_WS2812FX_SegmentAnimation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetQromaStrip_WS2812FX_Brightness$Type extends MessageType<SetQromaStrip_WS2812FX_Brightness> {
    constructor() {
        super("SetQromaStrip_WS2812FX_Brightness", [
            { no: 1, name: "stripIndex", kind: "enum", T: () => ["QromaStrip_WS2812FX_StripIndex", QromaStrip_WS2812FX_StripIndex] },
            { no: 2, name: "brightness", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetQromaStrip_WS2812FX_Brightness>): SetQromaStrip_WS2812FX_Brightness {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stripIndex = 0;
        message.brightness = 0;
        if (value !== undefined)
            reflectionMergePartial<SetQromaStrip_WS2812FX_Brightness>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetQromaStrip_WS2812FX_Brightness): SetQromaStrip_WS2812FX_Brightness {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QromaStrip_WS2812FX_StripIndex stripIndex */ 1:
                    message.stripIndex = reader.int32();
                    break;
                case /* uint32 brightness */ 2:
                    message.brightness = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetQromaStrip_WS2812FX_Brightness, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QromaStrip_WS2812FX_StripIndex stripIndex = 1; */
        if (message.stripIndex !== 0)
            writer.tag(1, WireType.Varint).int32(message.stripIndex);
        /* uint32 brightness = 2; */
        if (message.brightness !== 0)
            writer.tag(2, WireType.Varint).uint32(message.brightness);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetQromaStrip_WS2812FX_Brightness
 */
export const SetQromaStrip_WS2812FX_Brightness = new SetQromaStrip_WS2812FX_Brightness$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetQromaStrip_WS2812FX_IoSettings$Type extends MessageType<SetQromaStrip_WS2812FX_IoSettings> {
    constructor() {
        super("SetQromaStrip_WS2812FX_IoSettings", [
            { no: 1, name: "stripIndex", kind: "enum", T: () => ["QromaStrip_WS2812FX_StripIndex", QromaStrip_WS2812FX_StripIndex] },
            { no: 2, name: "settings", kind: "message", T: () => QromaStrip_WS2812FX_IoSettings }
        ]);
    }
    create(value?: PartialMessage<SetQromaStrip_WS2812FX_IoSettings>): SetQromaStrip_WS2812FX_IoSettings {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stripIndex = 0;
        if (value !== undefined)
            reflectionMergePartial<SetQromaStrip_WS2812FX_IoSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetQromaStrip_WS2812FX_IoSettings): SetQromaStrip_WS2812FX_IoSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QromaStrip_WS2812FX_StripIndex stripIndex */ 1:
                    message.stripIndex = reader.int32();
                    break;
                case /* QromaStrip_WS2812FX_IoSettings settings */ 2:
                    message.settings = QromaStrip_WS2812FX_IoSettings.internalBinaryRead(reader, reader.uint32(), options, message.settings);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetQromaStrip_WS2812FX_IoSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QromaStrip_WS2812FX_StripIndex stripIndex = 1; */
        if (message.stripIndex !== 0)
            writer.tag(1, WireType.Varint).int32(message.stripIndex);
        /* QromaStrip_WS2812FX_IoSettings settings = 2; */
        if (message.settings)
            QromaStrip_WS2812FX_IoSettings.internalBinaryWrite(message.settings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetQromaStrip_WS2812FX_IoSettings
 */
export const SetQromaStrip_WS2812FX_IoSettings = new SetQromaStrip_WS2812FX_IoSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SaveQromaStrip_CurrentState$Type extends MessageType<SaveQromaStrip_CurrentState> {
    constructor() {
        super("SaveQromaStrip_CurrentState", [
            { no: 1, name: "stripIndex", kind: "enum", T: () => ["QromaStrip_WS2812FX_StripIndex", QromaStrip_WS2812FX_StripIndex] }
        ]);
    }
    create(value?: PartialMessage<SaveQromaStrip_CurrentState>): SaveQromaStrip_CurrentState {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stripIndex = 0;
        if (value !== undefined)
            reflectionMergePartial<SaveQromaStrip_CurrentState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SaveQromaStrip_CurrentState): SaveQromaStrip_CurrentState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QromaStrip_WS2812FX_StripIndex stripIndex */ 1:
                    message.stripIndex = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SaveQromaStrip_CurrentState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QromaStrip_WS2812FX_StripIndex stripIndex = 1; */
        if (message.stripIndex !== 0)
            writer.tag(1, WireType.Varint).int32(message.stripIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SaveQromaStrip_CurrentState
 */
export const SaveQromaStrip_CurrentState = new SaveQromaStrip_CurrentState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaStripCommand$Type extends MessageType<QromaStripCommand> {
    constructor() {
        super("QromaStripCommand", [
            { no: 1, name: "setQromaStripBrightness", kind: "message", oneof: "command", T: () => SetQromaStrip_WS2812FX_Brightness },
            { no: 2, name: "setQromaStripSegmentAnimation", kind: "message", oneof: "command", T: () => SetQromaStrip_WS2812FX_SegmentAnimation },
            { no: 3, name: "setQromaStripSegments", kind: "message", oneof: "command", T: () => SetQromaStrip_WS2812FX_Segments },
            { no: 4, name: "setQromaStripIoSettings", kind: "message", oneof: "command", T: () => SetQromaStrip_WS2812FX_IoSettings },
            { no: 5, name: "saveQromaStripCurrentState", kind: "message", oneof: "command", T: () => SaveQromaStrip_CurrentState }
        ]);
    }
    create(value?: PartialMessage<QromaStripCommand>): QromaStripCommand {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.command = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<QromaStripCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaStripCommand): QromaStripCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* SetQromaStrip_WS2812FX_Brightness setQromaStripBrightness */ 1:
                    message.command = {
                        oneofKind: "setQromaStripBrightness",
                        setQromaStripBrightness: SetQromaStrip_WS2812FX_Brightness.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).setQromaStripBrightness)
                    };
                    break;
                case /* SetQromaStrip_WS2812FX_SegmentAnimation setQromaStripSegmentAnimation */ 2:
                    message.command = {
                        oneofKind: "setQromaStripSegmentAnimation",
                        setQromaStripSegmentAnimation: SetQromaStrip_WS2812FX_SegmentAnimation.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).setQromaStripSegmentAnimation)
                    };
                    break;
                case /* SetQromaStrip_WS2812FX_Segments setQromaStripSegments */ 3:
                    message.command = {
                        oneofKind: "setQromaStripSegments",
                        setQromaStripSegments: SetQromaStrip_WS2812FX_Segments.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).setQromaStripSegments)
                    };
                    break;
                case /* SetQromaStrip_WS2812FX_IoSettings setQromaStripIoSettings */ 4:
                    message.command = {
                        oneofKind: "setQromaStripIoSettings",
                        setQromaStripIoSettings: SetQromaStrip_WS2812FX_IoSettings.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).setQromaStripIoSettings)
                    };
                    break;
                case /* SaveQromaStrip_CurrentState saveQromaStripCurrentState */ 5:
                    message.command = {
                        oneofKind: "saveQromaStripCurrentState",
                        saveQromaStripCurrentState: SaveQromaStrip_CurrentState.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).saveQromaStripCurrentState)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaStripCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* SetQromaStrip_WS2812FX_Brightness setQromaStripBrightness = 1; */
        if (message.command.oneofKind === "setQromaStripBrightness")
            SetQromaStrip_WS2812FX_Brightness.internalBinaryWrite(message.command.setQromaStripBrightness, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* SetQromaStrip_WS2812FX_SegmentAnimation setQromaStripSegmentAnimation = 2; */
        if (message.command.oneofKind === "setQromaStripSegmentAnimation")
            SetQromaStrip_WS2812FX_SegmentAnimation.internalBinaryWrite(message.command.setQromaStripSegmentAnimation, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* SetQromaStrip_WS2812FX_Segments setQromaStripSegments = 3; */
        if (message.command.oneofKind === "setQromaStripSegments")
            SetQromaStrip_WS2812FX_Segments.internalBinaryWrite(message.command.setQromaStripSegments, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* SetQromaStrip_WS2812FX_IoSettings setQromaStripIoSettings = 4; */
        if (message.command.oneofKind === "setQromaStripIoSettings")
            SetQromaStrip_WS2812FX_IoSettings.internalBinaryWrite(message.command.setQromaStripIoSettings, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* SaveQromaStrip_CurrentState saveQromaStripCurrentState = 5; */
        if (message.command.oneofKind === "saveQromaStripCurrentState")
            SaveQromaStrip_CurrentState.internalBinaryWrite(message.command.saveQromaStripCurrentState, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaStripCommand
 */
export const QromaStripCommand = new QromaStripCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaStripResponse$Type extends MessageType<QromaStripResponse> {
    constructor() {
        super("QromaStripResponse", []);
    }
    create(value?: PartialMessage<QromaStripResponse>): QromaStripResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<QromaStripResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaStripResponse): QromaStripResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QromaStripResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaStripResponse
 */
export const QromaStripResponse = new QromaStripResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaStrip_Status$Type extends MessageType<QromaStrip_Status> {
    constructor() {
        super("QromaStrip_Status", [
            { no: 1, name: "lastConfigChangeTimeInMs", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<QromaStrip_Status>): QromaStrip_Status {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lastConfigChangeTimeInMs = 0;
        if (value !== undefined)
            reflectionMergePartial<QromaStrip_Status>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaStrip_Status): QromaStrip_Status {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 lastConfigChangeTimeInMs */ 1:
                    message.lastConfigChangeTimeInMs = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaStrip_Status, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 lastConfigChangeTimeInMs = 1; */
        if (message.lastConfigChangeTimeInMs !== 0)
            writer.tag(1, WireType.Varint).uint32(message.lastConfigChangeTimeInMs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaStrip_Status
 */
export const QromaStrip_Status = new QromaStrip_Status$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QpmCommand_SetQromaStripName$Type extends MessageType<QpmCommand_SetQromaStripName> {
    constructor() {
        super("QpmCommand_SetQromaStripName", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QpmCommand_SetQromaStripName>): QpmCommand_SetQromaStripName {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<QpmCommand_SetQromaStripName>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QpmCommand_SetQromaStripName): QpmCommand_SetQromaStripName {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QpmCommand_SetQromaStripName, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QpmCommand_SetQromaStripName
 */
export const QpmCommand_SetQromaStripName = new QpmCommand_SetQromaStripName$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetQromaDeviceName$Type extends MessageType<SetQromaDeviceName> {
    constructor() {
        super("SetQromaDeviceName", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetQromaDeviceName>): SetQromaDeviceName {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<SetQromaDeviceName>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetQromaDeviceName): SetQromaDeviceName {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetQromaDeviceName, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetQromaDeviceName
 */
export const SetQromaDeviceName = new SetQromaDeviceName$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UseCurrentSetupOnStartup$Type extends MessageType<UseCurrentSetupOnStartup> {
    constructor() {
        super("UseCurrentSetupOnStartup", [
            { no: 1, name: "delayInMs", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<UseCurrentSetupOnStartup>): UseCurrentSetupOnStartup {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.delayInMs = 0;
        if (value !== undefined)
            reflectionMergePartial<UseCurrentSetupOnStartup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UseCurrentSetupOnStartup): UseCurrentSetupOnStartup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 delayInMs */ 1:
                    message.delayInMs = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UseCurrentSetupOnStartup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 delayInMs = 1; */
        if (message.delayInMs !== 0)
            writer.tag(1, WireType.Varint).uint32(message.delayInMs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UseCurrentSetupOnStartup
 */
export const UseCurrentSetupOnStartup = new UseCurrentSetupOnStartup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaLightsCommand$Type extends MessageType<QromaLightsCommand> {
    constructor() {
        super("QromaLightsCommand", [
            { no: 1, name: "setQromaDeviceName", kind: "message", oneof: "command", T: () => SetQromaDeviceName },
            { no: 2, name: "qromaStripCommand", kind: "message", oneof: "command", T: () => QromaStripCommand }
        ]);
    }
    create(value?: PartialMessage<QromaLightsCommand>): QromaLightsCommand {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.command = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<QromaLightsCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaLightsCommand): QromaLightsCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* SetQromaDeviceName setQromaDeviceName */ 1:
                    message.command = {
                        oneofKind: "setQromaDeviceName",
                        setQromaDeviceName: SetQromaDeviceName.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).setQromaDeviceName)
                    };
                    break;
                case /* QromaStripCommand qromaStripCommand */ 2:
                    message.command = {
                        oneofKind: "qromaStripCommand",
                        qromaStripCommand: QromaStripCommand.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).qromaStripCommand)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaLightsCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* SetQromaDeviceName setQromaDeviceName = 1; */
        if (message.command.oneofKind === "setQromaDeviceName")
            SetQromaDeviceName.internalBinaryWrite(message.command.setQromaDeviceName, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* QromaStripCommand qromaStripCommand = 2; */
        if (message.command.oneofKind === "qromaStripCommand")
            QromaStripCommand.internalBinaryWrite(message.command.qromaStripCommand, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaLightsCommand
 */
export const QromaLightsCommand = new QromaLightsCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaLightsResponse$Type extends MessageType<QromaLightsResponse> {
    constructor() {
        super("QromaLightsResponse", [
            { no: 1, name: "qromaLightsConfigResponse", kind: "message", oneof: "response", T: () => QromaLightsConfig }
        ]);
    }
    create(value?: PartialMessage<QromaLightsResponse>): QromaLightsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<QromaLightsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaLightsResponse): QromaLightsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QromaLightsConfig qromaLightsConfigResponse */ 1:
                    message.response = {
                        oneofKind: "qromaLightsConfigResponse",
                        qromaLightsConfigResponse: QromaLightsConfig.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).qromaLightsConfigResponse)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaLightsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QromaLightsConfig qromaLightsConfigResponse = 1; */
        if (message.response.oneofKind === "qromaLightsConfigResponse")
            QromaLightsConfig.internalBinaryWrite(message.response.qromaLightsConfigResponse, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaLightsResponse
 */
export const QromaLightsResponse = new QromaLightsResponse$Type();
